# The main context:

# All file paths of "error_log", "access_log", and "pid" directives are
# relative to the path that was specified for the "--prefix" parameter
# of the "configure" command during the nginx build.

# All file paths of "include" directives are relative to the directory
# containing the .conf file containing those directives.

# Define user and group credentials used by worker processes.
user  nginx;

# Define the number of worker processes. One worker process for each cpu
# core is defined. 
worker_processes 2;

# Configure error logging for the entire application. Logging level is
# set to "notice", so "notice", "warn", "error", "crit", "alert", and
# "emerg" messages will be logged to the file error.log.
error_log  logs/error.log notice;

# Define a file that will store the process ID of the main process.
pid        logs/nginx.pid;


events {
# The events context contains directives that affect connection
# processing.

   # Define the maximum number of simultaneous connections that can be
   # opened by a worker process. This number includes all connections,
   # including connections with proxied servers.
   worker_connections  1024;
}


http {
# The HTTP context contains directives and other contexts that define
# how the application handles HTTP or HTTPS connections. Directives at
# this level control the defaults for all virtual servers defined
# within.

   # Include the MIME mapping table, which is a "types" directive that
   # maps file name extensions to MIME types of responses. 
   include mime.types; 

   # Define the default MIME type of a response. 
   default_type application/octet-stream;

   # Define formats for logging requests. Set the "escape" parameter to
   # "json" to enable json characters escaping in variables.

   # The main format is used for requests that do not result in
   # violations of a virtual server's content security policy.
   log_format main escape=json '{"remote_addr":"$remote_addr","remote_user":"$remote_user","time_local":"$time_local","request":"$request","status":"$status","body_bytes_sent":"$body_bytes_sent","http_referer":"$http_referer","http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for"}';

   # The csp format is used for requests that result in violations of a
   # virtual server's content security policy. The $request_body
   # variable contains a csp violation report that is sent in the body
   # of a POST request by a browser to a specific location of an address
   # whereon a virtual server is listening.
   log_format csp escape=json '{"remote_addr":"$remote_addr","remote_user":"$remote_user","time_local":"$time_local","request":"$request","request_body":"$request_body","status":"$status","body_bytes_sent":"$body_bytes_sent","http_referer":"$http_referer","http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for"}';

   # Set the path, format, and configuration for a buffered log write.
   # Unless overridden in lower-level contexts, all log data is
   # compressed to a compression level of 3 and written in the main
   # format to the file access.log. The use of the "gzip" parameter
   # causes log data to enter a 64-KB buffer before it's written to the
   # file. Data is written to the file if:
   #	 1) the next log line doesn't fit into the buffer,
   #	 2) the buffered data is older than the value specified by the
   #	 "flush" parameter, or
   #	 3) a worker process is re-opening log files or is shutting
   #	 down.
   access_log  logs/access.log main gzip=3 flush=1s;

   # Direct nginx to use the Linux sendfile() system call, which
   # prevents the copying of files into a buffer before sending them and
   # enables direct copying of data from one file descriptor to
   # another.
   sendfile        on;

   #tcp_nopush     on;

   # Set directives for keep-alive client connections:

   # Set the maximum number of requests that can be served through one
   # keep-alive connection. After the maximum number of requests are
   # made, the connection is closed.
   keepalive_requests 1000;

   # Limit the maximum time during which requests can be processed
   # through one keep-alive connection. After this time is reached, the
   # connection is closed following subsequent request processing.
   keepalive_time 1h;

   # Set a timeout during which a keep-alive client connection will stay
   # open on the server side. The timeout resets after each http
   # request is made. If no request is made during the timeout, then the
   # connection is closed.
   keepalive_timeout 60s;

   # Include the configuration of the website's virtual servers in the
   # http context of this configuration file.
   include sites-enabled/*.conf; 

}
