# Virtual server configuration:

server {
# The server context sets configuration for a virtual server.

   # Define all addresses and ports that should accept connections for
   # the server. Since the communication protocol between browser and
   # nginx is HTTP, the port is 80. The address 127.0.0.1 is that of a
   # local host, and is used for development purposes. 
   listen  127.0.0.1:80 default_server;
  
   # server_name	localhost;

   # Set the root directory for requests. This directory contains all
   # static files that are created during a create-react-app build.
   # Files include the main HTML file, CSS, JavaScript, fonts, and
   # images. JavaScript, CSS, and most media files are located in a
   # subdirectory called "static". The main HTML file is located in the
   # parent root directory.
   root    /home/zacharyflohr/Desktop/wnidel/frontend/build;

   # Set fields and directives for HTTP response headers:
   
   # The "always" parameter causes a field to be added to the response
   # header regardless of the response code.

   # Since website pages are not yet under Basic Auth or Digest Auth
   # and browser request headers don't contain the Authorization field,
   # responses are shared-cacheable.
   
   # Protect against click-jacking attacks by specifying the "SAMEORIGIN"
   # directive of the X-Frame-Options field. This ensures that all
   # website pages can only be displayed in a <frame>, <iframe>,
   # <embed>, or <object> on the same origin as the website itself.
   add_header X-Frame-Options SAMEORIGIN always;

   # Add the Report-To field to instruct user agents to store an
   # endpoint whereto CSP violation reports will be sent. If the
   # "report-to" directive is specified with the Content-Security-Policy
   # response header field, then the user agent will send a report to
   # the URL specified in the JSON directive of the Report-To response
   # header field when the CSP is violated. The "report-to" directive of
   # the Content-Security-Policy field is only supported by Google
   # Chrome and Microsoft Edge.
   add_header Report-To '{"group":"csp-endpoint","max_age":10886400,"endpoints":[{"url":"http://127.0.0.1/csp-violation-report/"}]}';
   
   # Protect against cross-site scripting attacks by incorporating a
   # Content Security Policy. By setting the value of the "default-src"
   # directive to be the IP address of the website, resources that are
   # normally fetched via "src" and "href" attributes of HTML elements (e.g.,
   # <script>, <img>, and <link>) may only be fetched if they come from
   # the origin of the page that contains those elements. The
   # "report-to" and "report-uri" directives of the
   # Content-Security-Policy response header field specify URIs whereto
   # user agents POST reports following attempts to violate the Content
   # Security Policy. Violation reports are sent as JSON objects and
   # stored in $request_body nginx embedded variables. Violation reports
   # contain the properties "blocked-uri", "document-uri",
   # "original-policy", "referrer", "violated-directive", etc.
   add_header Content-Security-Policy 'default-src http://127.0.0.1; report-to csp-endpoint; report-uri /csp-violation-report/;' always;
  
   # The "expires" nginx directive enables or disables adding or
   # modifying the Expires and Cache-Control response header fields
   # provided that the response code equals 200, 201, 204, 206, 301,
   # 302, 303, 304, 307, or 308. The "epoch" parameter sets the Expires
   # field to the value "Thu, 01 Jan 1970 00:00:01 GMT" and the
   # Cache-Control field to "no-cache". The "no-cache" response
   # directive indicates that the response can be stored in caches, but
   # the response must be validated with the origin server before each
   # reuse, even when the cache is disconnected from the origin server.
   # A "no-cache" directive for the Cache-Control response header field
   # is needed for all resources that are served directly from the
   # website's root directory (e.g., index.html and favicon.ico) as
   # these resources do not contain unique hashes in their filenames.
   # Since these resources are located in the public directory of the
   # create-react-app project during development, their filenames are
   # not given hashes during a create-react-app build. Validating the
   # cached index.html file with the origin server before each reuse
   # ensures that the browser loads the most current version of the file.
   expires epoch;

   # Enable checking the existence of precompressed files with a ".gz"
   # filename extension. If precompressed files exist, then nginx will
   # send them instead of regular files. If the client does not support
   # gzip compression, then nginx will send the regular files. The
   # "gzip_static" directive is part of the ngx_http_gzip_static_module,
   # which is not built by default. Sending precompressed static files
   # to user agents reduces latency. It also reduces the processing
   # overhead that occurs when files are compressed on-the-fly via the
   # ngx_http_gzip_module.
   gzip_static on;

   location /static/ {
      expires max;
      add_header Cache-Control immutable;
   }

   location /csp-violation-report {

      # Disable keep-alive client connections for clients attempting to
      # violate the Content Security Policy.      
      keepalive_timeout 0;

      limit_except POST {
	 deny all;
      }     

      if ($request_method = "POST") {
    	 access_log logs/csp.log csp gzip=3 flush=1s;
    	 proxy_pass http://unix:/usr/local/nginx/csp.sock:;
      } 
      
   }

   location /get-lexicographic-data/ {
      if ($http_referer ~* "localhost:3000") {
	 add_header Access-Control-Allow-Origin http://localhost:3000;
      }
      return 204;
   }

   #error_page  404              /404.html;

   # redirect server error pages to the static page /50x.html
   #
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
      root   /usr/local/nginx/html;
   }

   # proxy the PHP scripts to Apache listening on 127.0.0.1:80
   #
   #location ~ \.php$ {
   #    proxy_pass   http://127.0.0.1;
   #}

   # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
   #
   #location ~ \.php$ {
   #    root           html;
   #    fastcgi_pass   127.0.0.1:9000;
   #    fastcgi_index  index.php;
   #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
   #    include        fastcgi_params;
   #}

   # deny access to .htaccess files, if Apache's document root
   # concurs with nginx's one
   #
   #location ~ /\.ht {
   #    deny  all;
   #}
}

server {
   listen unix:/usr/local/nginx/csp.sock;
	
   location /csp-violation-report {
      access_log off;
      return 204;
   }
}

